syntax = "proto3";

package dac.blockchain;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Blockchain Services Definition
service BlockchainService {
  // Smart Contract Management
  rpc DeployContract(DeployContractRequest) returns (stream DeploymentResponse);
  rpc GetContractInfo(ContractInfoRequest) returns (ContractInfo);
  rpc CallContractMethod(ContractCallRequest) returns (ContractCallResponse);
  rpc EstimateGas(GasEstimateRequest) returns (GasEstimateResponse);
  
  // Transaction Operations
  rpc SendTransaction(TransactionRequest) returns (TransactionResponse);
  rpc GetTransaction(TransactionQueryRequest) returns (TransactionInfo);
  rpc GetTransactionReceipt(TransactionReceiptRequest) returns (TransactionReceipt);
  rpc MonitorTransactions(TransactionMonitorRequest) returns (stream TransactionEvent);
  
  // Wallet and Account Management
  rpc GetBalance(BalanceRequest) returns (BalanceResponse);
  rpc GetTokenBalance(TokenBalanceRequest) returns (TokenBalanceResponse);
  rpc GetNFTBalance(NFTBalanceRequest) returns (NFTBalanceResponse);
  rpc TransferTokens(TokenTransferRequest) returns (TransactionResponse);
  
  // Network Operations
  rpc GetNetworkInfo(google.protobuf.Empty) returns (NetworkInfo);
  rpc GetBlockInfo(BlockInfoRequest) returns (BlockInfo);
  rpc GetLatestBlock(google.protobuf.Empty) returns (BlockInfo);
  rpc EstimateTransactionCost(CostEstimateRequest) returns (CostEstimateResponse);
  
  // Event Monitoring
  rpc SubscribeToEvents(EventSubscriptionRequest) returns (stream BlockchainEvent);
  rpc GetEventLogs(EventLogRequest) returns (EventLogResponse);
  
  // Promethea DAC Specific Services
  rpc DeployPrometheaCore(PrometheaDeploymentRequest) returns (stream DeploymentResponse);
  rpc GetBeaconAddress(google.protobuf.Empty) returns (BeaconAddressResponse);
  rpc ValidateEthicalAlignment(EthicalValidationRequest) returns (EthicalValidationResponse);
  rpc RegisterDAOMember(MemberRegistrationRequest) returns (RegistrationResponse);
}

// Smart Contract Messages
message DeployContractRequest {
  string contract_name = 1;
  string bytecode = 2;
  string abi = 3;
  repeated string constructor_args = 4;
  GasSettings gas_settings = 5;
  string deployer_address = 6;
  string network = 7;
}

message DeploymentResponse {
  string deployment_id = 1;
  DeploymentStatus status = 2;
  double progress_percentage = 3;
  optional string contract_address = 4;
  optional string transaction_hash = 5;
  optional string error_message = 6;
  repeated string deployment_steps = 7;
}

message ContractInfoRequest {
  string contract_address = 1;
  string network = 2;
}

message ContractInfo {
  string address = 1;
  string name = 2;
  string abi = 3;
  string bytecode = 4;
  string deployer = 5;
  google.protobuf.Timestamp deployed_at = 6;
  string network = 7;
  string verification_status = 8;
}

message ContractCallRequest {
  string contract_address = 1;
  string method_name = 2;
  repeated string method_args = 3;
  string caller_address = 4;
  GasSettings gas_settings = 5;
  string network = 6;
  bool is_view_call = 7;
}

message ContractCallResponse {
  bool success = 1;
  string result = 2;
  optional string transaction_hash = 3;
  string gas_used = 4;
  optional string error_message = 5;
}

message GasEstimateRequest {
  string from_address = 1;
  string to_address = 2;
  string data = 3;
  string value = 4;
  string network = 5;
}

message GasEstimateResponse {
  string gas_limit = 1;
  string gas_price = 2;
  string max_fee_per_gas = 3;
  string max_priority_fee_per_gas = 4;
  string estimated_cost = 5;
}

message GasSettings {
  optional string gas_limit = 1;
  optional string gas_price = 2;
  optional string max_fee_per_gas = 3;
  optional string max_priority_fee_per_gas = 4;
}

// Transaction Messages
message TransactionRequest {
  string from_address = 1;
  string to_address = 2;
  string value = 3;
  string data = 4;
  GasSettings gas_settings = 5;
  string network = 6;
  string nonce = 7;
}

message TransactionResponse {
  bool success = 1;
  string transaction_hash = 2;
  string nonce = 3;
  optional string error_message = 4;
  string status = 5;
}

message TransactionQueryRequest {
  string transaction_hash = 1;
  string network = 2;
}

message TransactionInfo {
  string hash = 1;
  string from_address = 2;
  string to_address = 3;
  string value = 4;
  string gas_used = 5;
  string gas_price = 6;
  string status = 7;
  string block_number = 8;
  string block_hash = 9;
  google.protobuf.Timestamp timestamp = 10;
  string nonce = 11;
  string data = 12;
}

message TransactionReceiptRequest {
  string transaction_hash = 1;
  string network = 2;
}

message TransactionReceipt {
  string transaction_hash = 1;
  string block_hash = 2;
  string block_number = 3;
  string gas_used = 4;
  string status = 5;
  repeated EventLog logs = 6;
  string cumulative_gas_used = 7;
  string effective_gas_price = 8;
}

message EventLog {
  string address = 1;
  repeated string topics = 2;
  string data = 3;
  string block_number = 4;
  string transaction_hash = 5;
  string log_index = 6;
}

message TransactionMonitorRequest {
  repeated string addresses = 1;
  repeated string transaction_hashes = 2;
  string network = 3;
  bool include_pending = 4;
}

message TransactionEvent {
  TransactionEventType type = 1;
  TransactionInfo transaction = 2;
  google.protobuf.Timestamp timestamp = 3;
  string network = 4;
}

// Wallet and Balance Messages
message BalanceRequest {
  string address = 1;
  string network = 2;
  optional string block_number = 3;
}

message BalanceResponse {
  string balance = 1;
  string formatted_balance = 2;
  string currency = 3;
  string block_number = 4;
}

message TokenBalanceRequest {
  string wallet_address = 1;
  string token_address = 2;
  string network = 3;
}

message TokenBalanceResponse {
  string balance = 1;
  string formatted_balance = 2;
  TokenInfo token_info = 3;
}

message TokenInfo {
  string address = 1;
  string name = 2;
  string symbol = 3;
  int32 decimals = 4;
  string total_supply = 5;
}

message NFTBalanceRequest {
  string wallet_address = 1;
  string contract_address = 2;
  string network = 3;
}

message NFTBalanceResponse {
  repeated NFTToken tokens = 1;
  int32 total_count = 2;
}

message NFTToken {
  string token_id = 1;
  string contract_address = 2;
  string token_uri = 3;
  NFTMetadata metadata = 4;
  string owner = 5;
}

message NFTMetadata {
  string name = 1;
  string description = 2;
  string image = 3;
  repeated NFTAttribute attributes = 4;
}

message NFTAttribute {
  string trait_type = 1;
  string value = 2;
  string display_type = 3;
}

message TokenTransferRequest {
  string from_address = 1;
  string to_address = 2;
  string token_address = 3;
  string amount = 4;
  GasSettings gas_settings = 5;
  string network = 6;
}

// Network Messages
message NetworkInfo {
  string chain_id = 1;
  string network_name = 2;
  string rpc_url = 3;
  string explorer_url = 4;
  string currency_symbol = 5;
  string latest_block = 6;
  bool is_testnet = 7;
  NetworkHealth health = 8;
}

message NetworkHealth {
  bool is_synced = 1;
  double block_time = 2;
  string peer_count = 3;
  double gas_price = 4;
  bool is_congested = 5;
}

message BlockInfoRequest {
  string block_identifier = 1; // block number or hash
  string network = 2;
  bool include_transactions = 3;
}

message BlockInfo {
  string block_number = 1;
  string block_hash = 2;
  string parent_hash = 3;
  google.protobuf.Timestamp timestamp = 4;
  string miner = 5;
  string gas_used = 6;
  string gas_limit = 7;
  int32 transaction_count = 8;
  repeated TransactionInfo transactions = 9;
}

message CostEstimateRequest {
  TransactionType transaction_type = 1;
  string network = 2;
  optional string contract_address = 3;
  optional string method_name = 4;
  repeated string method_args = 5;
}

message CostEstimateResponse {
  string estimated_gas = 1;
  string gas_price = 2;
  string total_cost_eth = 3;
  string total_cost_usd = 4;
  CostBreakdown breakdown = 5;
}

message CostBreakdown {
  string base_fee = 1;
  string priority_fee = 2;
  string execution_cost = 3;
  string storage_cost = 4;
}

// Event Monitoring Messages
message EventSubscriptionRequest {
  repeated string contract_addresses = 1;
  repeated string event_signatures = 2;
  string network = 3;
  optional string from_block = 4;
  repeated string topics = 5;
}

message BlockchainEvent {
  EventType type = 1;
  string contract_address = 2;
  string event_name = 3;
  repeated EventParameter parameters = 4;
  string transaction_hash = 5;
  string block_number = 6;
  google.protobuf.Timestamp timestamp = 7;
}

message EventParameter {
  string name = 1;
  string type = 2;
  string value = 3;
  bool indexed = 4;
}

message EventLogRequest {
  string contract_address = 1;
  repeated string event_signatures = 2;
  string from_block = 3;
  string to_block = 4;
  string network = 5;
  repeated string topics = 6;
}

message EventLogResponse {
  repeated EventLog logs = 1;
  int32 total_count = 2;
  bool has_more = 3;
}

// Promethea DAC Specific Messages
message PrometheaDeploymentRequest {
  string network = 1;
  string deployer_address = 2;
  PrometheaConfig config = 3;
  GasSettings gas_settings = 4;
}

message PrometheaConfig {
  string dac_treasury_address = 1;
  string community_rewards_address = 2;
  string depth_os_incentives_address = 3;
  repeated string founder_addresses = 4;
  string initial_ethical_code_hash = 5;
  string initial_ethical_code_ipfs = 6;
}

message BeaconAddressResponse {
  string beacon_address = 1;
  string network = 2;
  bool is_active = 3;
  google.protobuf.Timestamp deployed_at = 4;
}

message EthicalValidationRequest {
  string action_description = 1;
  string requester_address = 2;
  repeated string stakeholders = 3;
  string impact_assessment = 4;
}

message EthicalValidationResponse {
  bool is_aligned = 1;
  double alignment_score = 2;
  repeated string ethical_considerations = 3;
  repeated string recommendations = 4;
  string validation_hash = 5;
}

message MemberRegistrationRequest {
  string wallet_address = 1;
  string identity_commitment = 2;
  MembershipTier tier = 3;
  string reputation_proof = 4;
}

message RegistrationResponse {
  bool success = 1;
  string member_id = 2;
  string registration_hash = 3;
  MembershipTier assigned_tier = 4;
  string initial_reputation = 5;
}

// Enums
enum DeploymentStatus {
  DEPLOYMENT_STATUS_UNSPECIFIED = 0;
  DEPLOYMENT_STATUS_PENDING = 1;
  DEPLOYMENT_STATUS_COMPILING = 2;
  DEPLOYMENT_STATUS_DEPLOYING = 3;
  DEPLOYMENT_STATUS_VERIFYING = 4;
  DEPLOYMENT_STATUS_COMPLETED = 5;
  DEPLOYMENT_STATUS_FAILED = 6;
}

enum TransactionEventType {
  TRANSACTION_EVENT_TYPE_UNSPECIFIED = 0;
  TRANSACTION_EVENT_TYPE_PENDING = 1;
  TRANSACTION_EVENT_TYPE_CONFIRMED = 2;
  TRANSACTION_EVENT_TYPE_FAILED = 3;
  TRANSACTION_EVENT_TYPE_REPLACED = 4;
}

enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  TRANSACTION_TYPE_TRANSFER = 1;
  TRANSACTION_TYPE_CONTRACT_CALL = 2;
  TRANSACTION_TYPE_CONTRACT_DEPLOYMENT = 3;
  TRANSACTION_TYPE_TOKEN_TRANSFER = 4;
  TRANSACTION_TYPE_NFT_TRANSFER = 5;
}

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_CONTRACT_EVENT = 1;
  EVENT_TYPE_TRANSFER = 2;
  EVENT_TYPE_APPROVAL = 3;
  EVENT_TYPE_GOVERNANCE = 4;
  EVENT_TYPE_CUSTOM = 5;
}

enum MembershipTier {
  MEMBERSHIP_TIER_UNSPECIFIED = 0;
  MEMBERSHIP_TIER_FREE = 1;
  MEMBERSHIP_TIER_BASIC = 2;
  MEMBERSHIP_TIER_PREMIUM = 3;
  MEMBERSHIP_TIER_ENTERPRISE = 4;
}